{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de4f6c0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Standard library imports\n",
    "import time\n",
    "\n",
    "# Third-party imports for data processing and numeric operations\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import xarray as xr\n",
    "\n",
    "# Visualization library\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Machine learning and data preprocessing imports from scikit-learn\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.ensemble import RandomForestClassifier, StackingClassifier\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import classification_report, f1_score, roc_auc_score, roc_curve, auc\n",
    "from sklearn.model_selection import cross_val_score, GridSearchCV, train_test_split, StratifiedShuffleSplit\n",
    "from sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.svm import SVC, LinearSVC\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "# Imports for advanced modeling and interpretation\n",
    "from xgboost import XGBClassifier\n",
    "import shap\n",
    "\n",
    "# Data profiling and reporting\n",
    "from ydata_profiling import ProfileReport\n",
    "\n",
    "# IPython display utilities (if you're using Jupyter Notebooks)\n",
    "from IPython.display import HTML\n",
    "\n",
    "\n",
    "def load_and_initial_process(filepath):\n",
    "    \"\"\"\n",
    "    Loads the dataset and performs initial processing.\n",
    "    Args:\n",
    "    - filepath: Path to the CSV file.\n",
    "\n",
    "    Returns:\n",
    "    - A pandas DataFrame with initial processing done.\n",
    "    \"\"\"\n",
    "    df = pd.read_csv(filepath, index_col=\"id\")\n",
    "    # Any initial processing steps can be added here\n",
    "    return df\n",
    "\n",
    "\n",
    "def clean_data(df):\n",
    "    \"\"\"\n",
    "    Cleans the provided DataFrame.\n",
    "    Args:\n",
    "    - df: pandas DataFrame to be cleaned.\n",
    "\n",
    "    Returns:\n",
    "    - Cleaned DataFrame.\n",
    "    \"\"\"\n",
    "    # give the dtypes of the columns if the data was squeeky clean\n",
    "    dtypes = {\n",
    "    'id' : np.int32,\n",
    "    'Age (4 levels)' : object,\n",
    "    'Gender' : object,\n",
    "    'French nationality' : object,\n",
    "    'Field of study' : object,\n",
    "    'Year of university' : object,\n",
    "    'Learning disabilities' : object,\n",
    "    'Difficulty memorizing lessons' : object,\n",
    "    'Professional objective' : object,\n",
    "    'Informed about opportunities' : object,\n",
    "    'Satisfied with living conditions' : object,\n",
    "    'Living with a partner/child' : object,\n",
    "    'Parental home' : object,\n",
    "    'Having only one parent' : object,\n",
    "    'At least one parent unemployed' : object,\n",
    "    'Siblings' : object,\n",
    "    'Long commute' : object,\n",
    "    'Mode of transportation' : object,\n",
    "    'Financial difficulties' : object,\n",
    "    'Grant' : object,\n",
    "    'Additional income' : object,\n",
    "    'Public health insurance ' : object,\n",
    "    'Private health insurance ' : object,\n",
    "    'C.M.U.' : object,\n",
    "    'Irregular rhythm of meals' : object,\n",
    "    'Unbalanced meals' : object,\n",
    "    'Eating junk food' : object,\n",
    "    'On a diet' : object,\n",
    "    'Irregular rhythm or unbalanced meals' : object,\n",
    "    'Physical activity(3 levels)' : object,\n",
    "    'Physical activity(2 levels)' : object,\n",
    "    'Weight (kg)' : np.int32,\n",
    "    'Height (cm)' : np.int32,\n",
    "    'Overweight and obesity' : object,\n",
    "    'Systolic blood pressure (mmHg)' : np.int32,\n",
    "    'Diastolic blood pressure (mmHg)' : np.int32,\n",
    "    'Prehypertension or hypertension' : object,\n",
    "    'Heart rate (bpm)' : np.int32,\n",
    "    'Abnormal heart rate' : object,\n",
    "    'Distant visual acuity of right eye (score /10)' : np.int32,\n",
    "    'Distant visual acuity of left eye (score /10)' : np.int32,\n",
    "    'Close visual acuity of right eye (score /10)' : np.int32,\n",
    "    'Close visual acuity of left eye (score /10)' : np.int32,\n",
    "    'Decreased in distant visual acuity' : object,\n",
    "    'Decreased in close visual acuity' : object,\n",
    "    'Urinalysis (glycosuria)' : object,\n",
    "    'Urinalysis (proteinuria)' : object,\n",
    "    'Urinalysis (hematuria)' : object,\n",
    "    'Urinalysis leukocyturia)' : object,\n",
    "    'Urinalysis (positive nitrite test)' : object,\n",
    "    'Abnormal urinalysis' : object,\n",
    "    'Vaccination up to date' : object,\n",
    "    'Control examination needed' : object,\n",
    "    'Anxiety symptoms' : object,\n",
    "    'Panic attack symptoms' : object,\n",
    "    'Depressive symptoms' : object,\n",
    "    'Cigarette smoker (5 levels)' : object,\n",
    "    'Cigarette smoker (3 levels)' : object,\n",
    "    'Drinker (3 levels)' : object,\n",
    "    'Drinker (2 levels)' : object,\n",
    "    'Binge drinking' : object,\n",
    "    'Marijuana use' : object,\n",
    "    'Other recreational drugs' : object}\n",
    "    \n",
    "    constant_imputer = SimpleImputer(strategy=\"constant\", fill_value = \"miss\")\n",
    "    \n",
    "    df['Age (4 levels)'] = df['Age (4 levels)'].astype(\"category\")\n",
    "    df['Gender'] = df['Gender'].astype(\"category\")\n",
    "    df['French nationality'] = df['French nationality'].astype(\"category\")\n",
    "    df['Field of study'] = df['Field of study'].astype(\"category\")\n",
    "    df['Year of university'] = df['Year of university'].astype(\"category\")\n",
    "    df['Learning disabilities'] = df['Learning disabilities'].astype(\"category\")\n",
    "    df['Difficulty memorizing lessons'] = df['Difficulty memorizing lessons'].astype(\"category\")\n",
    "    df['Professional objective'] = df['Professional objective'].astype(\"category\")\n",
    "    df['Informed about opportunities'] = df['Informed about opportunities'].astype(\"category\")\n",
    "    df['Satisfied with living conditions'] = df['Satisfied with living conditions'].astype(\"category\")\n",
    "    df['Living with a partner/child'] = df['Living with a partner/child'].astype(\"category\")\n",
    "    df['Parental home'] = df['Parental home'].astype(\"category\")\n",
    "    df['Having only one parent'] = df['Having only one parent'].astype(\"category\")\n",
    "    df['At least one parent unemployed'] = df['At least one parent unemployed'].astype(\"category\")\n",
    "    df['Siblings'] = df['Siblings'].astype(\"category\")\n",
    "    df['Long commute'] = df['Long commute'].astype(\"category\")\n",
    "    df['Mode of transportation'] = df['Mode of transportation'].astype(\"category\")\n",
    "    df['Financial difficulties'] = df['Financial difficulties'].astype(\"category\")\n",
    "    df['Grant'] = df['Grant'].astype(\"category\")\n",
    "    df['Additional income'] = df['Additional income'].astype(\"category\")\n",
    "    df['Public health insurance '] = df['Public health insurance '].astype(\"category\")\n",
    "    df['Private health insurance '] = df['Private health insurance '].astype(\"category\")\n",
    "    df['C.M.U.'] = df['C.M.U.'].astype(\"category\")\n",
    "    df['Irregular rhythm of meals'] = df['Irregular rhythm of meals'].astype(\"category\")\n",
    "    df['Unbalanced meals'] = df['Unbalanced meals'].astype(\"category\")\n",
    "    df['Eating junk food'] = df['Eating junk food'].astype(\"category\")\n",
    "    df['On a diet'] = df['On a diet'].astype(\"category\")\n",
    "    df['Irregular rhythm or unbalanced meals'] = df['Irregular rhythm or unbalanced meals'].astype(\"category\")\n",
    "    df['Physical activity(3 levels)'] = df['Physical activity(3 levels)'].astype(\"category\")\n",
    "    df['Physical activity(2 levels)'] = df['Physical activity(2 levels)'].astype(\"category\")\n",
    "    df['Overweight and obesity'] = df['Overweight and obesity'].astype(\"category\")\n",
    "    df['Prehypertension or hypertension'] = df['Prehypertension or hypertension'].astype(\"category\")\n",
    "    df['Abnormal heart rate'] = df['Abnormal heart rate'].astype(\"category\")\n",
    "    df['Decreased in distant visual acuity'] = df['Decreased in distant visual acuity'].astype(\"category\")\n",
    "    df['Decreased in close visual acuity'] = df['Decreased in close visual acuity'].astype(\"category\")\n",
    "    df['Urinalysis (glycosuria)'] = df['Urinalysis (glycosuria)'].astype(\"category\")\n",
    "    df['Urinalysis (proteinuria)'] = df['Urinalysis (proteinuria)'].astype(\"category\")\n",
    "    df['Urinalysis (hematuria)'] = df['Urinalysis (hematuria)'].astype(\"category\")\n",
    "    df['Urinalysis leukocyturia)'] = df['Urinalysis leukocyturia)'].astype(\"category\")\n",
    "    df['Urinalysis (positive nitrite test)'] = df['Urinalysis (positive nitrite test)'].astype(\"category\")\n",
    "    df['Abnormal urinalysis'] = df['Abnormal urinalysis'].astype(\"category\")\n",
    "    df['Vaccination up to date'] = df['Vaccination up to date'].astype(\"category\")\n",
    "    df['Control examination needed'] = df['Control examination needed'].astype(\"category\")\n",
    "    df['Anxiety symptoms'] = df['Anxiety symptoms'].astype(\"category\")\n",
    "    df['Panic attack symptoms'] = df['Panic attack symptoms'].astype(\"category\")\n",
    "    df['Depressive symptoms'] = df['Depressive symptoms'].astype(\"category\")\n",
    "    df['Cigarette smoker (5 levels)'] = df['Cigarette smoker (5 levels)'].astype(\"category\")\n",
    "    df['Cigarette smoker (3 levels)'] = df['Cigarette smoker (3 levels)'].astype(\"category\")\n",
    "    df['Drinker (3 levels)'] = df['Drinker (3 levels)'].astype(\"category\")\n",
    "    df['Drinker (2 levels)'] = df['Drinker (2 levels)'].astype(\"category\")\n",
    "    df['Binge drinking'] = df['Binge drinking'].astype(\"category\")\n",
    "    df['Marijuana use'] = df['Marijuana use'].astype(\"category\")\n",
    "    df['Other recreational drugs'] = df['Other recreational drugs'].astype(\"category\")\n",
    "    \n",
    "    integer_columns = df.dtypes == \"int64\"\n",
    "    numeric_columns = df.dtypes == \"float64\"\n",
    "    category_columns = df.dtypes == \"category\"\n",
    "    \n",
    "    cat_mask_object = (df.dtypes == \"category\")\n",
    "    cat_mask_object = df.columns[cat_mask_object].tolist()\n",
    "    cat_mask_numeric = (df.dtypes == \"float64\")\n",
    "    cat_mask_numeric = df.columns[cat_mask_numeric].tolist()\n",
    "    cat_mask_integer = (df.dtypes == \"int64\")\n",
    "    cat_mask_integer = df.columns[cat_mask_integer].tolist()\n",
    "    \n",
    "    numeric_columns_float64 = df[cat_mask_numeric].astype(\"float64\").fillna(0)\n",
    "    numeric_columns_int64 = df[cat_mask_integer].astype(\"int64\").fillna(0)\n",
    "    \n",
    "    df[cat_mask_object] = constant_imputer.fit_transform(df[cat_mask_object])\n",
    "    df_clean = pd.concat([numeric_columns_float64, numeric_columns_int64, df[cat_mask_object]], axis = 1)\n",
    "    \n",
    "    df_clean['Depressive symptoms'] = df_clean['Depressive symptoms'].replace(\"yes\\t\",\"yes\")\n",
    "    df_clean['Depressive symptoms'] = df_clean['Depressive symptoms'].replace(\"no\\t\",\"no\")\n",
    "    df_clean['Depressive symptoms'] = df_clean['Depressive symptoms'].replace(\"\\tyes\",\"yes\")\n",
    "    df_clean['Depressive symptoms'] = df_clean['Depressive symptoms'].replace(\"\\tno\",\"no\")\n",
    "    df_clean['Anxiety symptoms'] = df_clean['Anxiety symptoms'].replace(\"yes\\t\",\"yes\")\n",
    "    df_clean['Anxiety symptoms'] = df_clean['Anxiety symptoms'].replace(\"no\\t\",\"no\")\n",
    "    df_clean['Anxiety symptoms'] = df_clean['Anxiety symptoms'].replace(\"\\tyes\",\"yes\")\n",
    "    df_clean['Anxiety symptoms'] = df_clean['Anxiety symptoms'].replace(\"\\tno\",\"no\")\n",
    "    df_clean['Panic attack symptoms'] = df_clean['Panic attack symptoms'].replace(\"yes\\t\",\"yes\")\n",
    "    df_clean['Panic attack symptoms'] = df_clean['Panic attack symptoms'].replace(\"no\\t\",\"no\")\n",
    "    df_clean['Panic attack symptoms'] = df_clean['Panic attack symptoms'].replace(\"\\tyes\",\"yes\")\n",
    "    df_clean['Panic attack symptoms'] = df_clean['Panic attack symptoms'].replace(\"\\tno\",\"no\")\n",
    "    \n",
    "    # subsetting columns with another boolean mask for categorical columns and object columns\n",
    "    cat_mask_obj2 = (df_clean.dtypes == \"object\") | (df_clean.dtypes == \"category\")\n",
    "    cat_mask_object2 = df_clean.columns[cat_mask_obj2].tolist()\n",
    "    \n",
    "    # remove the column classification \n",
    "    cat_mask_object2.remove('Depressive symptoms')\n",
    "    cat_mask_object2.remove('Anxiety symptoms')\n",
    "    cat_mask_object2.remove('Panic attack symptoms')\n",
    "    \n",
    "    df_clean2 = df_clean[cat_mask_object2]\n",
    "    feature_name = list(df_clean2.columns.values.tolist())\n",
    "    for i in feature_name:\n",
    "        le = LabelEncoder()\n",
    "        label = le.fit_transform(df_clean2[i])\n",
    "        xlabel=np.unique(label, return_index=True)\n",
    "        new_val = xlabel[0]\n",
    "        rep_index = xlabel[1]+1\n",
    "        old_val = df_clean2[i]\t\n",
    "        num_idx = rep_index.shape[0]\n",
    "        for j in range(num_idx):\n",
    "            df_clean2[i] = df_clean2[i].replace(old_val[rep_index[j]],new_val[j])\n",
    "            \n",
    "    concat_cols = np.hstack((df_clean2.values, df_clean[cat_mask_numeric].values,df_clean[cat_mask_integer].values))\n",
    "    \n",
    "    df_cat_var = pd.DataFrame(df_clean2, columns=feature_name,index=list(range(1,4185)))\n",
    "    \n",
    "    concat_cols_df = pd.concat([df_clean[cat_mask_integer],df_clean[cat_mask_numeric], df_cat_var], axis=1) \n",
    "    \n",
    "    # now get the target variable into a numeric form\n",
    "    col_preprocess1 = df_clean[\"Depressive symptoms\"].replace(\"yes\", 1) \n",
    "    final_col_preprocess1 = col_preprocess1.replace(\"no\", 0)\n",
    "    y1 = final_col_preprocess1.values\n",
    "    \n",
    "    col_preprocess2 = df_clean[\"Anxiety symptoms\"].replace(\"yes\", 1) \n",
    "    final_col_preprocess2 = col_preprocess2.replace(\"no\", 0)\n",
    "    y2 = final_col_preprocess2.values\n",
    "    df_processed = concat_cols_df\n",
    "    \n",
    "    return df_processed, y1, y2\n",
    "\n",
    "def randomize_features(df, features, prob=0.2):\n",
    "    \"\"\"\n",
    "    Randomly alters some values in specified features of a dataframe.\n",
    "    Args:\n",
    "    - df: pandas DataFrame.\n",
    "    - features: List of column names to be randomized.\n",
    "    - prob: Probability of a value being altered.\n",
    "    \"\"\"\n",
    "    np.random.seed(42)\n",
    "    for feature in features:\n",
    "        unique_values = pd.unique(df[feature])\n",
    "        random_vector = np.random.rand(len(df), 1)\n",
    "        swap_indices = np.where(random_vector < prob)[0]\n",
    "        for idx in swap_indices:\n",
    "            if idx in df.index:\n",
    "                current_value = df.at[idx, feature]\n",
    "                possible_values = [val for val in unique_values if val != current_value]\n",
    "                df.at[idx, feature] = np.random.choice(possible_values)\n",
    "        print(f'Randomized feature: {feature}')\n",
    "    return df\n",
    "\n",
    "\n",
    "\n",
    "def main():\n",
    "# Load and initial process\n",
    "    df = load_and_initial_process('path/to/your/raw_data.csv')\n",
    "    \n",
    "    # Clean data\n",
    "    X, z1, z2 = clean_data(df)\n",
    "    \n",
    "    # Randomize features\n",
    "    random_features = [\n",
    "    'Difficulty memorizing lessons',\n",
    "    'Satisfied with living conditions',\n",
    "    'Long commute',\n",
    "    'Financial difficulties',\n",
    "    'Irregular rhythm of meals',\n",
    "    'Unbalanced meals',\n",
    "    'Eating junk food',\n",
    "    'Irregular rhythm or unbalanced meals',\n",
    "    'Physical activity(3 levels)',\n",
    "    'Physical activity(2 levels)',\n",
    "    'Prehypertension or hypertension',\n",
    "    'Cigarette smoker (5 levels)',\n",
    "    'Cigarette smoker (3 levels)',\n",
    "    'Drinker (3 levels)',\n",
    "    'Drinker (2 levels)',\n",
    "    'Binge drinking',\n",
    "    'Marijuana use']\n",
    "    df_random = randomize_features(X, random_features)\n",
    "    \n",
    "    X.to_csv('path/to/your/orginal_precessed_data.csv')\n",
    "    np.savetxt('path/to/your/depression_status.csv', z1, delimiter=',', fmt='%i')\n",
    "    np.savetxt('path/to/your/anxiety_status.csv, z2, delimiter=',', fmt='%i')\n",
    "    df_random.to_csv('path/to/your/perturbed_data_0.2.txt')\n",
    "\n",
    "#z1_loaded = np.loadtxt('/data/kuw/biocore/wlku/pipeline/kuw_analysis/minhua/depression_status_test.csv', delimiter=',')\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
